// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package wp.proj.movies.dipendency;

import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import wp.proj.movies.api.ApiService;
import wp.proj.movies.common.App;
import wp.proj.movies.common.GlideSetting;
import wp.proj.movies.common.GlideSetting_MembersInjector;
import wp.proj.movies.dipendency.feature.tvshowdetails.TvShowDetailComponent;
import wp.proj.movies.dipendency.feature.tvshowdetails.TvShowDetailModule;
import wp.proj.movies.dipendency.feature.tvshowdetails.TvShowDetailModule_ProvideTvShowDetailPresenterFactory;
import wp.proj.movies.dipendency.feature.tvshowlisting.TvShowListingComponent;
import wp.proj.movies.dipendency.feature.tvshowlisting.TvShowListingModule;
import wp.proj.movies.dipendency.feature.tvshowlisting.TvShowListingModule_ProvideTvShowListingPresenterFactory;
import wp.proj.movies.feature.tvshowdetails.TvShowDetailFragment;
import wp.proj.movies.feature.tvshowdetails.TvShowDetailFragment_MembersInjector;
import wp.proj.movies.feature.tvshowdetails.TvShowDetailPresenter;
import wp.proj.movies.feature.tvshowlisting.TvShowListingFragment;
import wp.proj.movies.feature.tvshowlisting.TvShowListingFragment_MembersInjector;
import wp.proj.movies.feature.tvshowlisting.TvShowListingPresenter;

public final class DaggerAppComponent implements AppComponent {
  private Provider<App> provideAppProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private MembersInjector<GlideSetting> glideSettingMembersInjector;

  private Provider<ApiService> provideApiServiceProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideAppProvider =
        DoubleCheck.provider(AppModule_ProvideAppFactory.create(builder.appModule));

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            AppModule_ProvideOkHttpClientFactory.create(builder.appModule, provideAppProvider));

    this.glideSettingMembersInjector =
        GlideSetting_MembersInjector.create(provideOkHttpClientProvider);

    this.provideApiServiceProvider =
        DoubleCheck.provider(
            AppModule_ProvideApiServiceFactory.create(builder.appModule, provideAppProvider));
  }

  @Override
  public void inject(GlideSetting glideSetting) {
    glideSettingMembersInjector.injectMembers(glideSetting);
  }

  @Override
  public TvShowListingComponent plus(TvShowListingModule homeModule) {
    return new TvShowListingComponentImpl(homeModule);
  }

  @Override
  public TvShowDetailComponent plus(TvShowDetailModule homeModule) {
    return new TvShowDetailComponentImpl(homeModule);
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }

  private final class TvShowListingComponentImpl implements TvShowListingComponent {
    private final TvShowListingModule tvShowListingModule;

    private Provider<TvShowListingPresenter> provideTvShowListingPresenterProvider;

    private MembersInjector<TvShowListingFragment> tvShowListingFragmentMembersInjector;

    private TvShowListingComponentImpl(TvShowListingModule tvShowListingModule) {
      this.tvShowListingModule = Preconditions.checkNotNull(tvShowListingModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideTvShowListingPresenterProvider =
          DoubleCheck.provider(
              TvShowListingModule_ProvideTvShowListingPresenterFactory.create(
                  tvShowListingModule, DaggerAppComponent.this.provideApiServiceProvider));

      this.tvShowListingFragmentMembersInjector =
          TvShowListingFragment_MembersInjector.create(provideTvShowListingPresenterProvider);
    }

    @Override
    public void inject(TvShowListingFragment fragment) {
      tvShowListingFragmentMembersInjector.injectMembers(fragment);
    }
  }

  private final class TvShowDetailComponentImpl implements TvShowDetailComponent {
    private final TvShowDetailModule tvShowDetailModule;

    private Provider<TvShowDetailPresenter> provideTvShowDetailPresenterProvider;

    private MembersInjector<TvShowDetailFragment> tvShowDetailFragmentMembersInjector;

    private TvShowDetailComponentImpl(TvShowDetailModule tvShowDetailModule) {
      this.tvShowDetailModule = Preconditions.checkNotNull(tvShowDetailModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideTvShowDetailPresenterProvider =
          DoubleCheck.provider(
              TvShowDetailModule_ProvideTvShowDetailPresenterFactory.create(
                  tvShowDetailModule, DaggerAppComponent.this.provideApiServiceProvider));

      this.tvShowDetailFragmentMembersInjector =
          TvShowDetailFragment_MembersInjector.create(provideTvShowDetailPresenterProvider);
    }

    @Override
    public void inject(TvShowDetailFragment tvShowDetailFragment) {
      tvShowDetailFragmentMembersInjector.injectMembers(tvShowDetailFragment);
    }
  }
}
